# Docker Compose for E-Commerce Microservices Demo
version: "3.9"

services:
  # ------------------------------
  # 1. Service Discovery
  # ------------------------------
  # consul:
  #   image: consul:1.16
  #   container_name: consul
  #   ports:
  #     - "8500:8500"
  #   command: "agent -dev -client=0.0.0.0"
  #   networks:
  #     - app-network

  local-consul:
    build: ./local-consul
    container_name: local-consul
    ports:
      - "8500:8500"
    environment:
      PORT: 8500
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
    networks:
      - app-network

  message-broker:
    build: ./message-broker
    container_name: message-broker
    ports:
      - "3009:3009"
    environment:
      PORT: 3009
      SERVICE_NAME: message-broker
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
    depends_on:
      - local-consul
      - nats
    networks:
      - app-network

  # ------------------------------
  # 2. Message Broker (NATS)
  # ------------------------------
  nats:
    image: nats:2.10
    command: ["-js"]  # enables JetStream
    container_name: nats
    ports:
      - "4223:4222"          # Host 4223 → Container 4222 (avoids conflict if another NATS runs)
      - "3010:8222"
      # - "4222:4222"
      # - "3009:8222" # NATS monitoring
    depends_on:
      - local-consul
    networks:
      - app-network

  # ------------------------------
  # 3. Databases
  # ------------------------------
  mongo:
    image: mongo:7
    container_name: mongo
    restart: always
    ports:
      - "27018:27017"       # Host 27018 → Container 27017 (avoids conflict with local MongoDB)
      # - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: main_db
    ports:
      - "5433:5432"          # Host 5433 → Container 5432 (avoids conflict with local PostgreSQL)
      # - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6380:6379"          # Host 6380 → Container 6379 (avoids conflict with local Redis)
      # - "6379:6379"
    networks:
      - app-network

  # ------------------------------
  # 4. API Gateway
  # ------------------------------
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      JWT_SECRET: supersecretkey
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
    depends_on:
      - local-consul
      - nats
    networks:
      - app-network

  # ------------------------------
  # 5. Auth Service
  # ------------------------------
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      JWT_SECRET: supersecretkey
      SERVICE_NAME: auth
      MONGO_URI: mongodb://mongo:27017/auth
      CONSUL_URL: http://local-consul:8500
      MESSAGE_BROKER_URL: http://message-broker:3009
      NATS_URL: nats://nats:4222
    depends_on:
      - message-broker
      - api-gateway
      - mongo
      - local-consul
      - nats
    networks:
      - app-network

  # ------------------------------
  # 6. Products Service
  # ------------------------------
  products-service:
    build: ./product-service
    container_name: products-service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      JWT_SECRET: supersecretkey
      SERVICE_NAME: products
      MONGO_URI: mongodb://mongo:27017/products
      MESSAGE_BROKER_URL: http://message-broker:3009
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
    depends_on:
      - message-broker
      - api-gateway
      - mongo
      - nats
    networks:
      - app-network
    volumes:
      - ./product-service/uploads:/app/uploads  # persist product images

  # ------------------------------
  # 7. Cart Service
  # ------------------------------
  cart-service:
    build: ./cart-service
    container_name: cart-service
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
      JWT_SECRET: supersecretkey
      SERVICE_NAME: cart
      MONGO_URI: mongodb://mongo:27017/cart
      MESSAGE_BROKER_URL: http://message-broker:3009
      REDIS_URL: redis://redis:6379
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
    depends_on:
      - message-broker
      - api-gateway
      - redis
      - nats
    networks:
      - app-network

  # ------------------------------
  # 8. Orders Service
  # ------------------------------
  orders-service:
    build: ./order-service
    container_name: orders-service
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      JWT_SECRET: supersecretkey
      SERVICE_NAME: orders
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASS: password
      DB_NAME: main_db
      # POSTGRES_URL: postgres://postgres:password@postgres:5432/orderdb
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
      MESSAGE_BROKER_URL: http://message-broker:3009
    depends_on:
      - message-broker
      - api-gateway
      - postgres
      - nats
    networks:
      - app-network

  # ------------------------------
  # 9. Payments Service
  # ------------------------------
  payments-service:
    build: ./payment-service
    container_name: payments-service
    ports:
      - "3005:3005"
    environment:
      PORT: 3005
      SERVICE_NAME: payments
      ASYNC_PAYMENT_DELAY_MS: 3000
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY} 
      IDEMPOTENCY_TTL_SEC: 86400
      # STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      CONSUL_URL: http://local-consul:8500
      MESSAGE_BROKER_URL: http://message-broker:3009
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
    env_file:
      - .env
    depends_on:
      - message-broker
      - api-gateway
      - postgres
      - nats
      - redis
    networks:
      - app-network

  # ------------------------------
  # 10. Recommendations Service
  # ------------------------------
  recommendations-service:
    build: ./recommendations-service
    container_name: recommendations-service
    ports:
      - "3007:3007"
    environment:
      PORT: 3007
      JWT_SECRET: supersecretkey
      SERVICE_NAME: recommendations
      GEMINI_API_KEY: your-gemini-api-key
      GEMINI_API_URL: gemini-api-url
      MESSAGE_BROKER_URL: http://message-broker:3009
      MONGO_URI: mongodb://mongo:27017/recommendation
      CONSUL_URL: http://local-consul:8500
      NATS_URL: nats://nats:4222
    depends_on:
      - message-broker
      - api-gateway
      - mongo
      - nats
    networks:
      - app-network

  # ------------------------------
  # 11. Analytics Service
  # ------------------------------
  analytics-service:
    build: ./analytics-service
    container_name: analytics-service
    ports:
      - "3008:3008"
    environment:
      PORT: 3008
      JWT_SECRET: supersecretkey
      MONGO_URI: mongodb://mongo:27017/analytics   # Use 'mongo' as hostname, not localhost
      CONSUL_URL: http://local-consul:8500          # Use 'local-consul' as hostname
      MESSAGE_BROKER_URL: http://message-broker:3009         # Use 'message-broker' as hostname
      NATS_URL: nats://nats:4222         # Use NATS service in network
      SERVICE_NAME: analytics
    depends_on:
      - message-broker
      - api-gateway
      - postgres
      - nats
    networks:
      - app-network

  # ------------------------------
  # 12. Frontend
  # ------------------------------
  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: http://api-gateway:8080
    container_name: frontend
    ports:
      - "3000" # Only internal to network
      # - "3000:3000"
    environment:
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://api-gateway:8080
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY} 
    env_file:
      - .env
    depends_on:
      - api-gateway
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "3000:80"  # Host browser hits localhost:3000
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - app-network

# ------------------------------
# NETWORKS & VOLUMES
# ------------------------------
networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  pg_data:
